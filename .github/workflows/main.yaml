name: CI
on:
  push:
    branches: [ "main" ]
jobs:
  build:
    name: Build and Pushing the Image
    runs-on: ubuntu-latest
    outputs:
      output1: ${{steps.build-image.outputs.image }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
        IMAGE_TAG: latest
      run: |
        ls
        cd BikeStores.MSSQL
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
  release:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Fetching the deployment repo
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: build
          workflow: CD
          # workflow: CD-TESTING
          repository: reflections-cloud-practice/gitops-application-environment/
          token: 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
          client-payload: '{"image_name": "${{ env.ECR_REG }}","image_tag": "${{needs.build.outputs.output1}}", "app_repo": "hello-world", "env_name": "dev"}'
          
