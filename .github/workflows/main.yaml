name: CI
on:
  push:
    branches: [ "main" ]
env:
  ECR_REPOSITORY: demo21
jobs:
  build:
    name: Build and Pushing the Image
    runs-on: ubuntu-latest
    outputs:
      output1: ${{steps.build-image.outputs.image }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.AWS_REGION }}
        repository: demo21
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        pwd
        docker build -t hello345 /home/runner/work/demo-dotnet/demo-dotnet/BikeStores.MSSQLU .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
        IMAGE_ID=${GITHUB_REF##*/}-$git_hash
        echo $IMAGE_ID
        echo "::set-output name=image::$IMAGE_ID"


        
  release:
       runs-on: ubuntu-latest
       needs: build   
       steps:
        - name: Fetching the deployment repo
          uses: peter-evans/repository-dispatch@v2
          with:
            event-type: build
            workflow: CD
            repository: awst-global/api.awst.io-environment
            token: ${{ secrets.REPO_ACCESS_TOKEN }}
            
            client-payload: '{"tag_name": "${{needs.build.outputs.output1}}"}'
          
